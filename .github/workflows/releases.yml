name: Releases

on:
  workflow_dispatch:
  push:
    branches:
      - release
    paths:
      - 'src/**/*'
      - '.github/workflows/releases.yml'

env:
  CONTAINER_BASE_IMAGE: "mcr.microsoft.com/dotnet/aspnet:8.0"
  CONTAINER_REGISTRY: "ghcr.io"
  CONTAINER_REPOSITORY: "lancemccarthy/energymonitor"
  WORKING_DIRECTORY: "src/"
  PROJECT_PATH: 'EnergyMonitor/EnergyMonitor/EnergyMonitor.csproj'

jobs:
  # Creates a common version number using year.monthday.runnumber for all the builds to use (e.g., 2024.328.4 or 2024.1031.16)
  generate_tag:
    runs-on: ubuntu-22.04
    outputs:
      tag_prefix: ${{ steps.tag-creator.outputs.tag_prefix }}
    steps:
    - name: Generate tag prefix
      id: tag-creator
      run: |
        buildDay=`date +%Y.%m.%d`
        tags="$buildDay.$GITHUB_RUN_NUMBER"
        echo "tag_prefix=$tags" >> $GITHUB_OUTPUT

  #######################################################################
  #                   .NET SDK CONTAINER BUILD                          #
  #######################################################################
  
  # Build an image for x64 machines
  build_x64:
    runs-on: ubuntu-22.04
    needs: [generate_tag]
    permissions:
      contents: read
      packages: write
    outputs:
      build_tag: ${{ steps.build.outputs.build_tag }}
    env:
      target_arch: "x64"
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Login to GitHub Container Registry
      run: docker login ${{env.CONTAINER_REGISTRY}} -u ${{github.actor}} -p ${{secrets.GITHUB_TOKEN}}

    - name: Restore NuGet Packages
      working-directory: ${{env.WORKING_DIRECTORY}}
      run: dotnet restore ${{env.PROJECT_PATH}} -r "linux-${{env.target_arch}}" --configfile "./nuget.config"
      env:
        TELERIK_USERNAME: "api-key"
        TELERIK_PASSWORD: "${{secrets.TELERIK_NUGET_KEY}}"

    - name: build the x64 image
      id: build
      working-directory: ${{env.WORKING_DIRECTORY}}
      run: |
        TAG="${{env.TAG_PREFIX}}-${{env.target_arch}}"
        echo "build_tag=$TAG" >> $GITHUB_OUTPUT
        dotnet publish ${{env.PROJECT_PATH}} -t:PublishContainer -p PublishProfile=DefaultContainer --arch ${{env.target_arch}} -p ContainerImageTag="$TAG" -p ContainerRepository=${{env.CONTAINER_REPOSITORY}} -p ContainerRegistry=${{env.CONTAINER_REGISTRY}} -p ContainerBaseImage=${{env.CONTAINER_BASE_IMAGE}} --no-restore
      env:
        TAG_PREFIX: ${{needs.generate_tag.outputs.tag_prefix}}

  # Build an image for ARM64 machines
  build_arm64:
    runs-on: ubuntu-22.04
    needs: [generate_tag]
    permissions:
      contents: read
      packages: write
    outputs:
      build_tag: ${{ steps.build.outputs.build_tag }}
    env:
      target_arch: "arm64"
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Login to GitHub Container Registry
      run: docker login ${{env.CONTAINER_REGISTRY}} -u ${{github.actor}} -p ${{secrets.GITHUB_TOKEN}}

    - name: Restore NuGet Packages
      working-directory: ${{env.WORKING_DIRECTORY}}
      run: dotnet restore ${{env.PROJECT_PATH}} -r "linux-${{env.target_arch}}" --configfile "./nuget.config"
      env:
        TELERIK_USERNAME: "api-key"
        TELERIK_PASSWORD: "${{secrets.TELERIK_NUGET_KEY}}"

    - name: build the arm64 image
      id: build
      working-directory: ${{env.WORKING_DIRECTORY}}
      run: |
        TAG="${{env.TAG_PREFIX}}-${{env.target_arch}}"
        echo "build_tag=$TAG" >> $GITHUB_OUTPUT
        dotnet publish ${{env.PROJECT_PATH}} -t:PublishContainer -p PublishProfile=DefaultContainer --arch ${{env.target_arch}} -p ContainerImageTag="$TAG" -p ContainerRepository=${{env.CONTAINER_REPOSITORY}} -p ContainerRegistry=${{env.CONTAINER_REGISTRY}} -p ContainerBaseImage=${{env.CONTAINER_BASE_IMAGE}} --no-restore
      env:
        TAG_PREFIX: ${{needs.generate_tag.outputs.tag_prefix}}

  # Combine images into single manifest (.NET SDK doesn't support multi-arch container builds yet)
  publish_combined_manifest:
    runs-on: ubuntu-22.04
    needs: [build_x64, build_arm64]
    if: needs.build_x64.outputs.build_tag != '' && needs.build_arm64.outputs.build_tag != ''
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Login to GitHub Container Registry
      run: docker login ${{env.CONTAINER_REGISTRY}} -u ${{github.actor}} -p ${{secrets.GITHUB_TOKEN}}

    - name: create the multi-image manifest
      run: |
        docker manifest create "${{env.CONTAINER_REGISTRY}}/${{env.CONTAINER_REPOSITORY}}:latest" \
          "${{env.CONTAINER_REGISTRY}}/${{env.CONTAINER_REPOSITORY}}:$X86_TAG" \
          "${{env.CONTAINER_REGISTRY}}/${{env.CONTAINER_REPOSITORY}}:$ARM64_TAG"
        
        docker manifest push "${{env.CONTAINER_REGISTRY}}/${{env.CONTAINER_REPOSITORY}}:latest"
      env:
        X86_TAG: ${{needs.build_x64.outputs.build_tag}}
        ARM64_TAG: ${{needs.build_arm64.outputs.build_tag}}


  #########################################################
  #                    WINDOWS BUILD                      #
  #########################################################
  build_windows:
    runs-on: windows-2022
    needs: [generate_tag]
    env:
      RID: win-x64
      WEBAPP_PACKAGE_PATH: 'myapp'
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore NuGet Packages
      working-directory: ${{env.WORKING_DIRECTORY}}
      run: |
        dotnet restore ${{env.PROJECT_PATH}} --configfile ".\nuget.config" -r ${{env.RID}}
      env:
        TELERIK_USERNAME: "api-key"
        TELERIK_PASSWORD: "${{secrets.TELERIK_NUGET_KEY}}"

    - name: Build Project
      working-directory: ${{env.WORKING_DIRECTORY}}
      run: |
        dotnet publish ${{env.PROJECT_PATH}} -c Release -r ${{env.RID}} --no-restore --property:PublishDir='${{env.WEBAPP_PACKAGE_PATH}}'

    - uses: actions/upload-artifact@v4
      with:
        name: '${{env.TAG_PREFIX}}_net8.0-${{env.RID}}'
        path: '${{env.WORKING_DIRECTORY}}\EnergyMonitor\EnergyMonitor\${{env.WEBAPP_PACKAGE_PATH}}'
      env:
        TAG_PREFIX: ${{needs.generate_tag.outputs.tag_prefix}}

    # There's no azure app, if it is decided to create one, I need the generate publish-profile (service principal option is better)
    # https://learn.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=userlevel%2Caspnetcore#1-generate-deployment-credentials
    # - name: 'Azure webapp deploy (via publish profile)'
    #   uses: azure/webapps-deploy@v3
    #   with: 
    #     app-name: "my-app-name-from-az-portal"
    #     option 1 => creds: ${{secrets.AZURE_SERVICE_PRINCIPAL }} #json of principal response
    #     option 2 => publish-profile: ${{secrets.AZURE_WEBAPP_PUBLISH_PROFILE }} # (file contents, not base64)
    #     package: '${{env.WORKING_DIRECTORY}}\EnergyMonitor\EnergyMonitor\${{env.WEBAPP_PACKAGE_PATH}}'
